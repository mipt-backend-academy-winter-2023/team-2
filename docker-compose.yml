version: "3.9"

services:
  jams:
    image: "vovapolu/jams:0.1.0"
    ports:
      - "8080:8080"

  kafka-schema-registry:
    image: bitnami/schema-registry:6.0
    ports:
      - "9093:8081"
    depends_on:
      - kafka-images
      - kafka-zipper
    environment:
      SCHEMA_REGISTRY_DEBUG: true
      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka-images:9092,PLAINTEXT://kafka-zipper:9092
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "9092:8080"
    depends_on:
      - kafka-schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: images_zipper
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-images:9092,kafka-zipper:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://kafka-schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 9094
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "9094:9094"
  kafka-images:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z kafka-images 9092 || exit -1
      interval: 4s
      timeout: 4s
      retries: 16
    ports:
      - "9095:9095"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-images:9092,PLAINTEXT_HOST://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-zipper:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z kafka-zipper 9092 || exit -1
      interval: 4s
      timeout: 4s
      retries: 16
    ports:
      - "9096:9096"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-zipper:9092,PLAINTEXT_HOST://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


  auth:
    build: .
    ports:
      - "8082:8082"
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain auth.AuthMain'"

  routing-balancer:
    image: nginx
    ports:
      - "8000:80"
    volumes:
      - "./src/main/resources/nginx.conf:/etc/nginx/nginx.conf"
  routing1:
    build: .
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain routing.RoutingMain'"
  routing2:
    build: .
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain routing.RoutingMain'"
  routing3:
    build: .
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain routing.RoutingMain'"

  images:
    build: .
    depends_on:
      kafka-images:
        condition: service_healthy
    ports:
      - "8083:8083"
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain images.ImagesMain'"
    volumes:
      - image-storage:/var/img/
  zipper:
    build: .
    depends_on:
      kafka-zipper:
        condition: service_healthy
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain zipper.ZipperMain'"
    volumes:
      - image-storage:/var/img/

  database:
    image: "postgres"
    env_file:
      - docker-compose/database.env
    ports:
      - "5443:5432"
    volumes:
      - database-data:/var/lib/postgresql/data/
  routedatabase:
    build:
      context: .
      dockerfile: Dockerfile-db
    env_file:
      - docker-compose/routedatabase.env
    ports:
      - "5444:5432"
    volumes:
      - database-data:/var/lib/postgresql/routedata/
#  helper:
#    build: .
#    expose:
#      - "7777"
#    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain helper.HelperMain'"


volumes:
  database-data:
  image-storage:
