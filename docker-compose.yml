version: "3.9"

services:
  jams:
    image: "vovapolu/jams:0.1.0"
    ports:
      - "8080:8080"

#  kafka:
#    image: docker.io/bitnami/kafka:3.4.0-debian-11-r23
#    ports:
#      - "9094:9094"
#    volumes:
#      - "kafka_data:/bitnami"
#    environment:
#      - BITNAMI_DEBUG=yes
#      - ALLOW_PLAINTEXT_LISTENER=yes
#      - KAFKA_KRAFT_CLUSTER_ID=9YoavaRpTCOitT3Dm2OQFQ
#      - KAFKA_CFG_LISTENERS=CLIENT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
#      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9094
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    ports:
#      - "9094:9094"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:9094
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#  kafka-ui:
#    image: provectuslabs/kafka-ui:v0.7.0
#    ports:
#      - "9095:8080"
#    depends_on:
#      kafka:
#        condition: service_started
#      kafka-schema-registry:
#        condition: service_started
#    environment:
#      KAFKA_CLUSTERS_0_NAME: baeldung
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://kafka-schema-registry:8081
#      DYNAMIC_CONFIG_ENABLED: 'true'
#  kafka-schema-registry:
#    image: bitnami/schema-registry:6.0
#    ports:
#      - "9096:8081"
#    depends_on:
#      kafka:
#        condition: service_started
#    environment:
#      SCHEMA_REGISTRY_DEBUG: true
#      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka:9092
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 9095
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "9095:9095"
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:9095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  auth:
    build: .
    ports:
      - "8082:8082"
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain auth.AuthMain'"

  routing-balancer:
    image: nginx
    ports:
      - "8000:80"
    volumes:
      - "./src/main/resources/nginx.conf:/etc/nginx/nginx.conf"
  routing1:
    build: .
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain routing.RoutingMain'"
  routing2:
    build: .
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain routing.RoutingMain'"
  routing3:
    build: .
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain routing.RoutingMain'"

  images:
    build: .
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain images.ImagesMain'"

  database:
    image: "postgres"
    env_file:
      - docker-compose/database.env
    ports:
      - "5443:5432"
    volumes:
      - database-data:/var/lib/postgresql/data/
  routedatabase:
    build:
      context: .
      dockerfile: Dockerfile-db
    env_file:
      - docker-compose/routedatabase.env
    ports:
      - "5444:5432"
    volumes:
      - database-data:/var/lib/postgresql/routedata/
#  helper:
#    build: .
#    expose:
#      - "7777"
#    entrypoint: bash -c "source ~/.sdkman/bin/sdkman-init.sh && sbt 'runMain helper.HelperMain'"


volumes:
  kafka_data:
  database-data:
