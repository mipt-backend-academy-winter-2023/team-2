openapi: 3.0.3
info:
  title: Route Finding API
  description: Route finding service API documentation
  contact:
    email: egorov.ga@phystech.edu
  version: 1.0.0

servers:
  - url: http://localhost:8000/api/v3

tags:
  - name: auth
    description: Authorization
  - name: route
    description: Everything connected with routes
  - name: image
    description: Upload a JPEG image

paths:
  /upload/{nodeId}:
    post:
      tags:
        - image
      summary: Upload image
      description: Uploads a single JPEG image to the specified node.
      parameters:
        - in: path
          name: nodeId
          required: true
          description: The identifier of the node
          schema:
            type: string
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
              maxLength: 10485760
      responses:
        '200':
          description: Successfully uploaded the image
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '400':
          description: Invalid request - Image is not a valid JPEG format or exceeds the 10MB size limit.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid image format or size
  /download:
    get:
      summary: Download image
      description: Download a single JPEG image.
      parameters:
        - name: nodeId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully downloaded the image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
  /auth/signup:
    post:
      tags:
        - auth
      summary: Registration
      description: Create user from JSON object.
      operationId: signUp
      requestBody:
        description: User object for creating
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
        '400':
          description: Username exists
  /auth/signin:
    post:
      tags:
        - auth
      summary: Autorization
      description: Log user into system by username and password.
      operationId: signIn
      requestBody:
        description: User object for authorization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc|def"
        '403':
          description: Invalid username/password supplied
  /route/find:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - route
      summary: Find route
      description: Find points from ids.
      parameters:
        - name: ids
          in: query
          required: true
          schema:
            type: array
            items:
              type: integer
            minItems: 1
            example: [ 1, 2, 3 ]
          explode: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '403':
          description: Wrong token
        '400':
          description: Bad request



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
      xml:
        name: user
    Route:
      type: object
      properties:
        points:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "MyPoint"

