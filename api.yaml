openapi: 3.0.3
info:
  title: Route Finding API
  description: Route finding service API documentation
  version: 1.0.0

servers:
  - url: http://localhost:8081/
  - url: http://localhost:8082/
  - url: http://localhost:8083/

tags:
  - name: auth
    description: Authorization
  - name: route
    description: Everything connected with routes

paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: Registration
      description: Create user from JSON object.
      operationId: signUp
      requestBody:
        description: User object for creating
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
        '400':
          description: Username exists
  /auth/signin:
    post:
      tags:
        - auth
      summary: Autorization
      description: Log user into system by username and password.
      operationId: signIn
      requestBody:
        description: User object for authorization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc|def"
        '403':
          description: Invalid username/password supplied
  /route/find:
    get:
      tags:
        - route
      summary: Find route
      description: Find route between points
      parameters:
        - name: fromId
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: toId
          in: query
          required: true
          schema:
            type: integer
            example: 3
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              example:
                "Route - House house1 - Edge street3 - Crossroad intersection1"
        '400':
          description:
            Either fromId or toId argument was omitted

        '500':
          description:
            Wrong arguments types or node with specified id does not exist in database
  /debug_graph:
    get:
      tags:
        - debug
      summary: Debug graph
      description: Return whole graph for debug
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              example:
                "Nodes: Node(1,0,house1,0101000020E61000000000000000805BC00000000000003E40) Node(2,1,intersection1,0101000020E610000000000000000054C00000000000805140)
                 Edges: Edge(street3,2,1,4830944.0) Edge(street2,1,2,4830944.0)
                 Graph connections:
                 (1,0)
                 (0,1)"
  /upload:
    put:
      tags:
        - image
      summary: Upload image
      description: Upload photo for house or intersection.
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      parameters:
        - name: nodeId
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successfull operation
  /download:
    get:
      summary: Get the logo image
      parameters:
        - name: nodeId
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Logo image in PNG format
          content:
            image/png:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
      xml:
        name: user
    Route:
      type: object
      properties:
        points:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "MyPoint"

